$fib :: (Number) -> Number
fib($n) = $n > 2 ?? fib($n - 1) + fib($n - 2)
                 !! 1

$MyClass :: Class
MyClass = (
    do_this() := (
    )
)

[ ($i, $j) <$ [1..4] x [1..4] ]

# system 1: concrete, classic data structures
@data = [
    { .x: 1, .y: 2 },
    { .x: 6, .y: 5 },
    { .x: 2, .y: 9 },
]

data.filter(_.x > 1)
    .map(_.y)
    .reduce(_ + _)

sum(o.y for o in data if o.x > 1)
sum(o.y :: o <- data :: o.x > 1)

[ (x, y) for x in set1 for y in set2 ]
[ (x, y) :: x <- set1 :: y <- set2 ]
[ (x, y) :: (x, y) <- set1 x set2 ]
[ %set1 x %set2 ]


@data = (
    ( .x: 1, .y: 2 ),
    ( .x: 6, .y: 5 ),
    ( .x: 2, .y: 9 ),
)

@data
$> \\ $$.x > 3 -> $$.y























$d = ( x: 1, y: 1 )
%d.x == 1
%d.y == 2

f($x) = (
)

loop: (
    ...
)

$   # bound object (self) ($^ is parent scope's, e.g. useful for callbacks)
$$  # sub context ($$^ is parent scope)
$_  # sub params


$d = [
    ( x: 3, y: 1 )
    ( x: 2, y: 2 )
    ( x: 1, y: 3 )
    ( x: 2, y: 3 )
]

$d.length == 4
@d (1, 2) == ((x:2, y:2), (x:1, y:3))
@d [1] == [ (x:2, y:2) ]
@d {1} == { (x:2, y:2) }

[ _@d \(%.x) ] == (3, 2, 1, 2)
[ _@d \(%.x, %.y) ] == [(3, 1), (2, 2), (1, 3), (2, 3)]
[ _@d (\(%.x), \(%.y)) ] == [(3, 2, 1, 2), (1, 2, 3, 3)]
{ _@d (\(x: %.x), \(y: %.y)) } == { x: (3, 2, 1, 2), y: (1, 2, 3, 3) }


[ $o.x :: $$o <- @d ] == (3, 2, 1, 2)
[ $o(.x, .y) :: $$o <- @d ] == [(3, 1), (2, 2), (1, 3), (2, 3)]
[ @d \(%.x, %.y) ] == [(3, 2, 1, 2), (1, 2, 3, 3)]
{ @d \(x: %.x, y: %.y) } == { x: (3, 2, 1, 2), y: (1, 2, 3, 3) }

$d(@(0) :: $.length > 0) == (x:3, y:1)
@d \(%.x + %.y) == [ 4, 4, 4, 5 ]

@d \($ :: %.x > 1) @> \(%.y) $> sum _

sum(o.y for o in data if o.x > 1)
sum($o.y :: $o <- @data :: %o.x > 1)
sum(@data \($o):(%o.y :: %o.x > 1))

sum($o.y :: $o <- @set
         :: $o.x > 3)

@X x @Y
[ ($x, $y) :: $x <- @X
           :: $y <- @Y ]

@d ( %_.key )

p = k: v
$p.key

d := [
    (1, 2),
    (3, 4),
    (5, 6)
]
@d 1



$d (...) == @d(...)
$d [...] == @d(...)
$d {...} == %d(...)


h := {
    a: 1
    b: 2
    c: 3
    d: 3
}

h.size == 4

%h (.a, .b) == (1, 2)
%h [.a, .b] == [1, 2]
%h {.a, .b} == {1, 2}
%h {.a, .b, .c, .d} == {1, 2, 3}

@d (_.1) == [ 3, 2, 1 ]
@d (_.x :: _.y > 1) == [ 2, 1, 2 ]
@d (_ :: _.y > 1) == [ (x: 2, y: 2), (x: 1, y: 3), (x: 2, y: 3) ]




table = {
    ( x: 3, y: 1 )
    ( x: 2, y: 2 )
    ( x: 1, y: 3 )
    ( x: 2, y: 3 )
}
%table.x == { 3, 2, 1 }
%table (_.x :: _.y > 1) == { 2, 1 }
%table (_ :: _.y > 1) == { (x: 2, y: 2), (x: 1, y: 3), (x:2, y:3) }




records = (
    ( x: 3, y: 1 )
    ( x: 2, y: 2 )
    ( x: 1, y: 3 )
    ( x: 2, y: 3 )
)

records.x == ( 3, 2, 1, 2 )
records.y == ( 1, 2, 3, 3 )





















